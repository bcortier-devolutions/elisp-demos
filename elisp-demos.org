#+PROPERTY: header-args:elisp :results pp

#+CAPTION: Sort headings alphabetically
#+BEGIN_SRC elisp :results silent
;; Ensure two final newlines
(save-excursion
  (goto-char (point-max))
  (cond ((looking-back "\n\n"))
        ((looking-back "\n") (insert "\n"))
        (t (insert "\n\n"))))
(mark-whole-buffer)
(org-sort-entries nil ?a)
#+END_SRC

* %

#+BEGIN_SRC elisp
(% 9 4)
#+END_SRC

#+RESULTS:
: 1

* *

#+BEGIN_SRC elisp
(* 2 3)
#+END_SRC

#+RESULTS:
: 6

* +

#+BEGIN_SRC elisp
(+ 1 2 3)
#+END_SRC

#+RESULTS:
: 6

* -

#+BEGIN_SRC elisp
(- 3 1)
#+END_SRC

#+RESULTS:
: 2

* /

#+BEGIN_SRC elisp
(/ 6 2)
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC elisp
(list (/ 3 2)
      (/ 3 2.0))
#+END_SRC

#+RESULTS:
: (1 1.5)

* /=

#+BEGIN_SRC elisp
(/= 2 3)
#+END_SRC

#+RESULTS:
: t

* 1+

#+BEGIN_SRC elisp
(1+ 2)
#+END_SRC

#+RESULTS:
: 3

* 1-

#+BEGIN_SRC elisp
(1- 2)
#+END_SRC

#+RESULTS:
: 1

* <

#+BEGIN_SRC elisp
(< 2 3)
#+END_SRC

#+RESULTS:
: t

* <=

#+BEGIN_SRC elisp
(<= 2 2.0)
#+END_SRC

#+RESULTS:
: t

* =

#+BEGIN_SRC elisp
(= 1 1.0)
#+END_SRC

#+RESULTS:
: t

* >

#+BEGIN_SRC elisp
(> 3 2)
#+END_SRC

#+RESULTS:
: t

* >=

#+BEGIN_SRC elisp
(>= 2 2.0)
#+END_SRC

#+RESULTS:
: t

* abs

#+BEGIN_SRC elisp
(abs -4)
#+END_SRC

#+RESULTS:
: 4

* acos

#+BEGIN_SRC elisp
(acos 0)
#+END_SRC

#+RESULTS:
: 1.5707963267948966

* add-hook

#+BEGIN_SRC elisp :eval no
(add-hook 'find-file-hook
          (lambda ()
            (and buffer-file-name
                 (equal buffer-file-name
                        user-init-file)
                 (message "Stop tweaking Emacs"))))
#+END_SRC

* add-to-list

#+BEGIN_SRC elisp
(let ((l '(1 2)))
  (add-to-list 'l 1)
  (add-to-list 'l 2)
  (add-to-list 'l 3)
  l)
#+END_SRC

#+RESULTS:
: (3 1 2)

* alist-get

#+BEGIN_SRC elisp
(alist-get 'y '((x . 1) (y . 2)))
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC elisp
;; TESTFN was added since 26.1
(cl-assert (version<= "26.1" emacs-version))
(alist-get "x" '(("x" . 1) ("y" . 2)) nil nil #'equal)
#+END_SRC

#+RESULTS:
: 1

* and

#+BEGIN_SRC elisp
(list (and 1 2 3)
      (and 1 nil 3))
#+END_SRC

#+RESULTS:
: (3 nil)

* append

#+BEGIN_SRC elisp
(append '(1) '(2 3 4) nil)
#+END_SRC

#+RESULTS:
: (1 2 3 4)

* apply

#+BEGIN_SRC elisp
(apply #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

* aref

#+BEGIN_SRC elisp
(aref [1 2 3] 0)
#+END_SRC

#+RESULTS:
: 1

* arrayp

#+BEGIN_SRC elisp
(arrayp [])
#+END_SRC

#+RESULTS:
: t

* aset

#+BEGIN_SRC elisp
(let ((array [vector 1 2 3]))
  (aset array 0 100)
  array)
#+END_SRC

#+RESULTS:
: [100 1 2 3]

* asin

#+BEGIN_SRC elisp
(asin 1)
#+END_SRC

#+RESULTS:
: 1.5707963267948966

* assoc

#+BEGIN_SRC elisp
(assoc "two" '(("one" 1)
               ("two" 2)
               ("three" 3)))
#+END_SRC

#+RESULTS:
: ("two" 2)

* assoc-default

#+BEGIN_SRC elisp
(list (assoc-default 'x '(x (y 2)) #'eq 1)
      (assoc-default 'y '(x (y 2)) #'eq 1)
      (assoc-default 'z '(x (y 2)) #'eq 1))
#+END_SRC

#+RESULTS:
: (1
:  (2)
:  nil)

* assq

#+BEGIN_SRC elisp
(assq 'y '((x . 1)
           (y . 2)
           (z . 3)))
#+END_SRC

#+RESULTS:
: (y . 2)

* atan

#+BEGIN_SRC elisp
(atan 1)
#+END_SRC

#+RESULTS:
: 0.7853981633974483

* atom

#+BEGIN_SRC elisp
(atom 42)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(atom '())
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(atom '(1 2 . 3))
#+END_SRC

#+RESULTS:
: nil

* base64-decode-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "aGVsbG8=")
  (base64-decode-region (point-min) (point-max))
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hello"

* base64-decode-string

#+BEGIN_SRC elisp
(base64-decode-string "aGVsbG8=")
#+END_SRC

#+RESULTS:
: "hello"

* base64-encode-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello")
  (base64-encode-region (point-min) (point-max))
  (buffer-string))
#+END_SRC

#+RESULTS:
: "aGVsbG8="

* base64-encode-string

#+BEGIN_SRC elisp
(base64-encode-string "hello")
#+END_SRC

#+RESULTS:
: "aGVsbG8="

* buffer-end

#+BEGIN_SRC elisp
(cl-assert (buffer-end +1) (point-max))
(cl-assert (buffer-end -1) (point-min))
#+END_SRC

#+RESULTS:
: nil

* buffer-hash

#+BEGIN_SRC elisp
(with-temp-buffer
  (buffer-hash))
#+END_SRC

#+RESULTS:
: "da39a3ee5e6b4b0d3255bfef95601890afd80709"

* buffer-narrowed-p

#+BEGIN_SRC elisp
(list (buffer-narrowed-p)
      (with-temp-buffer
        (insert "hello")
        (narrow-to-region 1 2)
        (buffer-narrowed-p)))
#+END_SRC

#+RESULTS:
: (nil t)

* buffer-size

#+BEGIN_SRC elisp
(buffer-size)
#+END_SRC

#+RESULTS:
: 14480

* buffer-string

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert (propertize "hello" 'face 'bold))
  (buffer-string))
#+END_SRC

#+RESULTS:
: #("hello" 0 5
:   (face bold))

* calc-eval

#+BEGIN_SRC elisp
(calc-eval "2 + 3")
#+END_SRC

#+RESULTS:
: "5"

* call-process

#+BEGIN_SRC elisp
(with-temp-buffer
  (list :exit-status
        (call-process "echo" nil t nil "hello" "world")
        :output
        (buffer-string)))
#+END_SRC

#+RESULTS:
: (:exit-status 0 :output "hello world\n")

* call-process-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello\n")
  (call-process-region (point-min) (point-max) "wc" t t)
  (buffer-string))
#+END_SRC

#+RESULTS:
: "       1       1       6\n"

* call-process-shell-command

#+BEGIN_SRC elisp
(with-temp-buffer
  (list :exit-status
        (call-process-shell-command "echo hello | wc" nil t)
        :output
        (buffer-string)))
#+END_SRC

#+RESULTS:
: (:exit-status 0 :output "       1       1       6\n")

* capitalize

#+BEGIN_SRC elisp
(capitalize "THE cat in the hat")
#+END_SRC

#+RESULTS:
: "The Cat In The Hat"

* car

#+BEGIN_SRC elisp
(car '(a b c))
#+END_SRC

#+RESULTS:
: a

#+BEGIN_SRC elisp
(car '())
#+END_SRC

#+RESULTS:
: nil

* catch

#+BEGIN_SRC elisp
(catch 'break
  (while t
    (throw 'break 42)))
#+END_SRC

#+RESULTS:
: 42

* cdr

#+BEGIN_SRC elisp
(cdr '(a b c))
#+END_SRC

#+RESULTS:
: (b c)

#+BEGIN_SRC elisp
(cdr '())
#+END_SRC

#+RESULTS:
: nil

* ceiling

#+BEGIN_SRC elisp
;; -> +âˆž
(ceiling 1.2)
#+END_SRC

#+RESULTS:
: 2

* char-before

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert ?\n)
  (char-before))
#+END_SRC

#+RESULTS:
: 10

* char-equal

#+BEGIN_SRC elisp
(list (char-equal ?x ?X)
      (let ((case-fold-search nil))
        (char-equal ?x ?X)))
#+END_SRC

#+RESULTS:
: (t nil)

* char-to-string

#+BEGIN_SRC elisp
(char-to-string ?A)
#+END_SRC

#+RESULTS:
: "A"

* cl-assert

#+BEGIN_SRC elisp
(cl-assert (= (+ 2 3) 5))
#+END_SRC

#+RESULTS:
: nil

* cl-incf

#+BEGIN_SRC elisp
(let ((x 0))
  (cl-incf x)
  x)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3)))
  (cl-incf (cadr nums) 100)
  nums)
#+END_SRC

#+RESULTS:
: (1 102 3)

* cl-loop

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 5
         collect i)
#+END_SRC

#+RESULTS:
: (1 2 3 4 5)

* cl-mapcan

#+BEGIN_SRC elisp
(cl-mapcan
 (lambda (pair)
   (let ((key (car pair))
         (val (cdr pair)))
     (list (intern (format ":%s" key)) val)))
 '((x . 1) (y . 2) (z . 3)))
#+END_SRC

#+RESULTS:
: (:x 1 :y 2 :z 3)

#+BEGIN_SRC elisp
(cl-mapcan #'make-list '(1 2 3) '(a b c))
#+END_SRC

#+RESULTS:
: (a b b c c c)

* cl-mapcar

#+BEGIN_SRC elisp
(cl-mapcar #'cons '(a b c) '(1 2 3))
#+END_SRC

#+RESULTS:
: ((a . 1)
:  (b . 2)
:  (c . 3))

* cl-mapcon

#+BEGIN_SRC elisp
(cl-mapcon #'copy-sequence '(1 2 3))
#+END_SRC

#+RESULTS:
: (1 2 3 2 3 3)

* cl-mapl

#+BEGIN_SRC elisp :results output
(cl-mapl #'print '(1 2 3))
#+END_SRC

#+RESULTS:
: "\n(1 2 3)\n\n(2 3)\n\n(3)\n"

* cl-maplist

#+BEGIN_SRC elisp
(cl-maplist #'identity '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: ((1 2 3 4 5)
:  (2 3 4 5)
:  (3 4 5)
:  (4 5)
:  (5))

* cl-psetq

#+BEGIN_SRC elisp
(let ((x 1)
      (y 2))
  (cl-psetq x y
            y x)
  (list x y))
#+END_SRC

#+RESULTS:
: (2 1)

* cl-remove-if

#+BEGIN_SRC elisp
(cl-remove-if (lambda (elt) (< elt 0)) '(0 1 -1 3 -3 5))
#+END_SRC

#+RESULTS:
: (0 1 3 5)

* clear-string

#+BEGIN_SRC elisp
(let ((password "123456"))
  (clear-string password)
  (string-to-list password))
#+END_SRC

#+RESULTS:
: (0 0 0 0 0 0)

* clrhash

#+BEGIN_SRC elisp
(let ((table (make-hash-table)))
  (puthash 'x 1 table)
  (puthash 'y 2 table)
  (clrhash table)
  table)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data
: ())

* concat

#+BEGIN_SRC elisp
(concat "hello" " world")
#+END_SRC

#+RESULTS:
: "hello world"

* cond

#+BEGIN_SRC elisp
(let ((x 42))
  (cond ((= x 0) 'zero)
        ((> x 0) 'positive)
        (t 'negative)))
#+END_SRC

#+RESULTS:
: positive

* cons

#+BEGIN_SRC elisp
(cons 1 (cons 2 (cons 3 nil)))
#+END_SRC

#+RESULTS:
: (1 2 3)

* consp

#+BEGIN_SRC elisp
(consp '(1 . 2))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(consp '(1 2 3))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(consp '())
#+END_SRC

#+RESULTS:
: nil

* copy-hash-table

#+BEGIN_SRC elisp
(copy-hash-table #s(hash-table data (x 1 y 2)))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data
: (x 1 y 2))

* copy-keymap

#+BEGIN_SRC elisp
(equal (current-local-map) (copy-keymap (current-local-map)))
#+END_SRC

#+RESULTS:
: t

* copy-sequence

#+BEGIN_SRC elisp
(let* ((x '(1 2 3 4))
       (y x)
       (z (copy-sequence x)))
  (setq x (nreverse x))
  (list :reversed x
        :modified y
        :copied z))
#+END_SRC

#+RESULTS:
: (:reversed
:  (4 3 2 1)
:  :modified
:  (1)
:  :copied
:  (1 2 3 4))

* copy-tree

#+BEGIN_SRC elisp
(let* ((list '((1 2)))
       (shallow-copy (copy-sequence list))
       (deep-copy (copy-tree list)))
  (cl-assert      (eq (car shallow-copy) (car list)))
  (cl-assert (not (eq (car deep-copy) (car list)))))
#+END_SRC

#+RESULTS:
: nil

* cos

#+BEGIN_SRC elisp
(cos 0)
#+END_SRC

#+RESULTS:
: 1.0

* current-active-maps

#+BEGIN_SRC elisp
(length (current-active-maps))
#+END_SRC

#+RESULTS:
: 10

* declare-function

#+BEGIN_SRC elisp
(declare-function dired-jump "dired-x" (&optional other-window file-name))
#+END_SRC

* defalias

#+BEGIN_SRC elisp :eval no
(defalias '\` (symbol-function 'backquote))
#+END_SRC

* define-advice

#+BEGIN_SRC elisp :eval no
(define-advice shell-command (:after (&rest _) trim-trailing-newline)
  "Delete the annoying trailing newline after C-u M-!."
  (when (and (eq this-command 'shell-command)
             current-prefix-arg)
    (exchange-point-and-mark t)
    (when (eq (char-before) ?\n)
      (delete-char -1))))

;; (advice-remove 'shell-command #'shell-command@trim-trailing-newline)
#+END_SRC

* define-key

#+BEGIN_SRC elisp :eval no
(define-key (current-global-map) (kbd "C-c C-c") #'emacs-version)
#+END_SRC

* define-minor-mode

#+BEGIN_SRC elisp
(define-minor-mode display-point-mode
  "Display of point position using the mode line."
  :lighter (:eval (format " %d" (point))))
#+END_SRC

#+RESULTS:
: nil

* defsubst

#+BEGIN_SRC elisp :eval no
(defsubst buffer-narrowed-p ()
  "Return non-nil if the current buffer is narrowed."
  (/= (- (point-max) (point-min)) (buffer-size)))
#+END_SRC

* defun

#+BEGIN_SRC elisp
(defun add-two-numbers (a b)
  "Add A to B."
  (+ a b))

(add-two-numbers 1 2)
#+END_SRC

#+RESULTS:
: 3

* delete-char

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello\n")
  (delete-char -1)
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hello"

* documentation

#+BEGIN_SRC elisp
(documentation '+)
#+END_SRC

#+RESULTS:
: "Return sum of any number of arguments, which are numbers or markers.\n\n(fn &rest NUMBERS-OR-MARKERS)"

* dolist

#+BEGIN_SRC elisp
(let (result)
  (dolist (elt '(1 2 3) result)
    (push elt result)))
#+END_SRC

#+RESULTS:
: (3 2 1)

* dotimes

#+BEGIN_SRC elisp :results output
(dotimes (i 5)
  (princ i))
#+END_SRC

#+RESULTS:
: "01234"

* downcase

#+BEGIN_SRC elisp
(downcase "Hello World")
#+END_SRC

#+RESULTS:
: "hello world"

* edit-and-eval-command

#+BEGIN_SRC elisp
(edit-and-eval-command "Please edit: " '(forward-word 1))
#+END_SRC

#+RESULTS:
: t

* elt

#+BEGIN_SRC elisp
;; Work on list
;; (nth 2 '(1 2 3 4))
(elt '(1 2 3 4) 2)
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC elisp
;; Work on array
;; (aref [1 2 3 4] 2)
(elt [1 2 3 4] 2)
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC elisp
;; Work on string
(string (elt "1234" 2))
#+END_SRC

#+RESULTS:
: "3"

* emacs-version

#+BEGIN_SRC elisp
(emacs-version)
#+END_SRC

#+RESULTS:
: "GNU Emacs 26.1 (build 1, x86_64-apple-darwin18.2.0, Carbon Version 158 AppKit 1671.1)\n of 2018-11-11"

* eql

#+BEGIN_SRC elisp
(eql 'foo 'foo)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(list (eql 1.0 1.0)
      (eql 1 1)
      (eql 1.0 1))
#+END_SRC

#+RESULTS:
: (t t nil)

* erase-buffer

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello world\n")
  (erase-buffer)
  (buffer-string))
#+END_SRC

#+RESULTS:
: ""

* eval-minibuffer

#+BEGIN_SRC elisp
(eval-minibuffer "Enter an expression: " (format "%s" '(+ 1 2)))
#+END_SRC

#+RESULTS:
: 3

* eval-when-compile

#+BEGIN_SRC elisp :eval no
;;; foo.el

(eval-when-compile
  (require 'cl-lib))

(defun foo ()
  (cl-incf (point)))

;;; foo.el ends here
#+END_SRC

#+BEGIN_SRC elisp :results silent
(message "1 Day has %d seconds."
         (eval-when-compile
           (* 24 60 60)))
#+END_SRC

* exp

#+BEGIN_SRC elisp
(exp 1)
#+END_SRC

#+RESULTS:
: 2.718281828459045

* expt

#+BEGIN_SRC elisp
(expt 2 10)
#+END_SRC

#+RESULTS:
: 1024

* fceiling

#+BEGIN_SRC elisp
(fceiling 1.2)
#+END_SRC

#+RESULTS:
: 2.0

* ffloor

#+BEGIN_SRC elisp
(ffloor 1.2)
#+END_SRC

#+RESULTS:
: 1.0

* file-exists-p

#+BEGIN_SRC elisp
(file-exists-p user-init-file)
#+END_SRC

#+RESULTS:
: t

* file-name-base

#+BEGIN_SRC elisp
(file-name-base "/Users/xcy/.emacs.d/init.el")
#+END_SRC

#+RESULTS:
: "init"

* file-name-directory

#+BEGIN_SRC elisp
(file-name-directory "/Users/xcy/.emacs.d/init.el")
#+END_SRC

#+RESULTS:
: "/Users/xcy/.emacs.d/"

* file-name-extension

#+BEGIN_SRC elisp
(file-name-extension "init.el")
#+END_SRC

#+RESULTS:
: "el"

* file-name-nondirectory

#+BEGIN_SRC elisp
(file-name-nondirectory "/Users/xcy/.emacs.d/init.el")
#+END_SRC

#+RESULTS:
: "init.el"

* fillarray

#+BEGIN_SRC elisp
(let ((array (vector 1 2 3)))
  (fillarray array 0)
  array)
#+END_SRC

#+RESULTS:
: [0 0 0]

* find-file

#+BEGIN_SRC elisp
(find-file user-init-file)
#+END_SRC

#+RESULTS:
: #<buffer init.el>

* float

#+BEGIN_SRC elisp
;; -> 0
(float 1)
#+END_SRC

#+RESULTS:
: 1.0

* floor

#+BEGIN_SRC elisp
;; -> -âˆž
(floor 1.2)
#+END_SRC

#+RESULTS:
: 1

* format

#+BEGIN_SRC elisp
(format "Hello, %s!" "World")
#+END_SRC

#+RESULTS:
: "Hello, World!"

#+BEGIN_SRC elisp
(apply #'format "%d (#o%o, #x%x, ?%c)"
        (make-list 4 ?A))
#+END_SRC

#+RESULTS:
: "65 (#o101, #x41, ?A)"

* fround

#+BEGIN_SRC elisp
(fround 1.5)
#+END_SRC

#+RESULTS:
: 2.0

* ftruncate

#+BEGIN_SRC elisp
(ftruncate 1.2)
#+END_SRC

#+RESULTS:
: 1.0

* funcall

#+BEGIN_SRC elisp
(funcall (intern "+") 1 2 3)
#+END_SRC

#+RESULTS:
: 6

* gensym

#+BEGIN_SRC elisp
(list gensym-counter
      (gensym)
      gensym-counter)
#+END_SRC

#+RESULTS:
: (11 g11 12)

* get-buffer-create

#+BEGIN_SRC elisp
(get-buffer-create " *foo*")
#+END_SRC

#+RESULTS:
: #<buffer  *foo*>

* gethash

#+BEGIN_SRC elisp
(gethash 'x #s(hash-table data (x 1 y 2)))
#+END_SRC

#+RESULTS:
: 1

* goto-char

#+BEGIN_SRC elisp :results silent
(goto-char (point-min))
#+END_SRC

* hash-table-count

#+BEGIN_SRC elisp
(hash-table-count #s(hash-table data (x 1 y 2 z 3)))
#+END_SRC

#+RESULTS:
: 3

* hash-table-p

#+BEGIN_SRC elisp
(hash-table-p #s(hash-table))
#+END_SRC

#+RESULTS:
: t

* hash-table-rehash-size

#+BEGIN_SRC elisp
(hash-table-rehash-size #s(hash-table))
#+END_SRC

#+RESULTS:
: 1.5

* hash-table-rehash-threshold

#+BEGIN_SRC elisp
(hash-table-rehash-threshold #s(hash-table))
#+END_SRC

#+RESULTS:
: 0.8125

* hash-table-size

#+BEGIN_SRC elisp
(hash-table-size #s(hash-table))
#+END_SRC

#+RESULTS:
: 65

* hash-table-test

#+BEGIN_SRC elisp
(hash-table-test #s(hash-table test eq))
#+END_SRC

#+RESULTS:
: eq

* hash-table-weakness

#+BEGIN_SRC elisp
(hash-table-weakness #s(hash-table))
#+END_SRC

#+RESULTS:
: nil

* identity

#+BEGIN_SRC elisp
(identity 42)
#+END_SRC

#+RESULTS:
: 42

* if

#+BEGIN_SRC elisp
(if nil 1 2)
#+END_SRC

#+RESULTS:
: 2

* ignore

#+BEGIN_SRC elisp
(ignore 42)
#+END_SRC

#+RESULTS:
: nil

* insert

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello" ?\s "world" ?\n)
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hello world\n"

* insert-file-contents

#+BEGIN_SRC elisp
(write-region "Hello World\n" nil "/tmp/tmp.txt")
(with-temp-buffer
  (list :return-value (insert-file-contents "/tmp/tmp.txt")
        :file-contents (buffer-string)))
#+END_SRC

#+RESULTS:
: (:return-value
:  ("/tmp/tmp.txt" 12)
:  :file-contents "Hello World\n")

* interactive

#+BEGIN_SRC elisp :eval no
(interactive "sName: \nbBuffer: \nP")
;; (list (read-string "Name: ")
;;       (read-buffer "Buffer: ")
;;       current-prefix-arg)
#+END_SRC

* intern

#+BEGIN_SRC elisp
(intern "foo")
#+END_SRC

#+RESULTS:
: foo

* intern-soft

#+BEGIN_SRC elisp
(list (intern-soft "abcde")
      (intern-soft "intern-soft"))
#+END_SRC

#+RESULTS:
: (nil intern-soft)

* json-encode

#+BEGIN_SRC elisp
(json-encode '((id . 42)
               (comment ((author . "Spike")
                         (date . "2018-11-08")))))
#+END_SRC

#+RESULTS:
: "{\"id\":42,\"comment\":[{\"author\":\"Spike\",\"date\":\"2018-11-08\"}]}"

* json-insert

#+BEGIN_SRC elisp
(with-temp-buffer
  (json-insert '(:id 42 :message "hello world"))
  (buffer-string))
#+END_SRC

#+RESULTS:
: "{\"id\":42,\"message\":\"hello world\"}"

* json-parse-buffer

#+BEGIN_SRC elisp
(with-current-buffer (url-retrieve-synchronously "https://api.github.com/status")
  (goto-char url-http-end-of-headers)
  (json-parse-buffer :object-type 'alist))
#+END_SRC

#+RESULTS:
: ((message . "GitHub lives! (2018-11-08 07:59:55 -0800) (1)"))

* json-parse-string

#+BEGIN_SRC elisp
(json-parse-string "{\"name\": \"Jessica\"}"
                   :object-type 'plist)
#+END_SRC

#+RESULTS:
: (:name "Jessica")

* json-read

#+BEGIN_SRC elisp
(with-current-buffer (url-retrieve-synchronously "https://api.github.com/status")
  (goto-char url-http-end-of-headers)
  (json-read))
#+END_SRC

#+RESULTS:
: ((message . "GitHub lives! (2018-11-08 07:42:52 -0800) (1)"))

* json-read-file

#+BEGIN_SRC elisp
(write-region "{\"name\": \"Jessica\"}" nil "/tmp/tmp.json")
(json-read-file "/tmp/tmp.json")
#+END_SRC

#+RESULTS:
: ((name . "Jessica"))

* json-read-from-string

#+BEGIN_SRC elisp
(json-read-from-string "{\"name\": \"Tom\", \"age\": 13}")
#+END_SRC

#+RESULTS:
: ((name . "Tom")
:  (age . 13))

* json-serialize

#+BEGIN_SRC elisp
(json-serialize '(:id 42 :message "hello world"))
#+END_SRC

#+RESULTS:
: "{\"id\":42,\"message\":\"hello world\"}"

* kbd

#+BEGIN_SRC elisp
(kbd "C-x C-f")
#+END_SRC

#+RESULTS:
: ""

* key-binding

#+BEGIN_SRC elisp
(key-binding (kbd "C-x C-s"))
#+END_SRC

#+RESULTS:
: save-buffer

* keymap-parent

#+BEGIN_SRC elisp
(let ((map (make-sparse-keymap)))
  (set-keymap-parent map text-mode-map)
  (eq text-mode-map (keymap-parent map)))
#+END_SRC

#+RESULTS:
: t

* keymapp

#+BEGIN_SRC elisp
(keymapp (current-global-map))
#+END_SRC

#+RESULTS:
: t

* lambda

#+BEGIN_SRC elisp
(lambda (x)
  "Return the hyperbolic cosine of X."
  (* 0.5 (+ (exp x) (exp (- x)))))
#+END_SRC

#+RESULTS:
: (lambda
:   (x)
:   "Return the hyperbolic cosine of X."
:   (* 0.5
:      (+
:       (exp x)
:       (exp
:        (- x)))))

* lax-plist-get

#+BEGIN_SRC elisp
(lax-plist-get '("foo" 1 "bar" 2) "bar")
#+END_SRC

#+RESULTS:
: 2

* lax-plist-put

#+BEGIN_SRC elisp
(let ((plist (list "a" 1 "b" 2)))
  (setq plist (lax-plist-put plist "b" 200)))
#+END_SRC

#+RESULTS:
: ("a" 1 "b" 200)

* length

#+BEGIN_SRC elisp
(length '(1 2 3))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC elisp
(length [1 2 3])
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC elisp
;; Return the number of characters
(length "123")
#+END_SRC

#+RESULTS:
: 3

* let-alist

#+BEGIN_SRC elisp
(let-alist '((id . 1234)
             (payload
              (url . "https://example.com")
              (title . "Example Domain")
              (content . "This domain is...")))
  (list :id .id
        :url .payload.url))
#+END_SRC

#+RESULTS:
: (:id 1234 :url "https://example.com")

* libxml-available-p

#+BEGIN_SRC elisp
(libxml-available-p)
#+END_SRC

#+RESULTS:
: t

* libxml-parse-html-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "<html><body><h1>Heading 1</h1><p>...</p></body></html>")
  (libxml-parse-html-region (point-min) (point-max)))
#+END_SRC

#+RESULTS:
: (html nil
:       (body nil
:             (h1 nil "Heading 1")
:             (p nil "...")))

#+BEGIN_SRC elisp :results silent
(with-current-buffer (url-retrieve-synchronously "http://example.com")
  (libxml-parse-html-region url-http-end-of-headers (point-max)))
#+END_SRC

* list

#+BEGIN_SRC elisp
(list 1 2 3)
#+END_SRC

#+RESULTS:
: (1 2 3)

* listp

#+BEGIN_SRC elisp
;; normal list
(listp '(1 2 3))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
;; empty list (aka nil)
(listp '())
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
;; cons cell
(listp '(1 . 2))
#+END_SRC

#+RESULTS:
: t

* locate-user-emacs-file

#+BEGIN_SRC elisp
(locate-user-emacs-file "custom.el")
#+END_SRC

#+RESULTS:
: "~/.emacs.d/custom.el"

* log

#+BEGIN_SRC elisp
(log 8 2)
#+END_SRC

#+RESULTS:
: 3.0

* lookup-key

#+BEGIN_SRC elisp
(lookup-key (current-global-map) (kbd "C-x C-c"))
#+END_SRC

#+RESULTS:
: save-buffers-kill-terminal

* lsh

#+BEGIN_SRC elisp
(cl-assert #b1010 (lsh #b101 1))
(cl-assert #b10 (lsh #b101 -1))
#+END_SRC

#+RESULTS:
: nil

* make-hash-table

#+BEGIN_SRC elisp
(make-hash-table)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data
: ())

* make-keymap

#+BEGIN_SRC elisp :results silent
(make-keymap)
#+END_SRC

* make-list

#+BEGIN_SRC elisp
(make-list 3 'pigs)
#+END_SRC

#+RESULTS:
: (pigs pigs pigs)

* make-record

#+BEGIN_SRC elisp
(make-record 'foo 9 'Z)
#+END_SRC

#+RESULTS:
: #s(foo Z Z Z Z Z Z Z Z Z)

* make-ring

#+BEGIN_SRC elisp
(make-ring 3)
#+END_SRC

#+RESULTS:
: (0 0 .
:    [nil nil nil])

* make-sparse-keymap

#+BEGIN_SRC elisp
(make-sparse-keymap)
#+END_SRC

#+RESULTS:
: (keymap)

* make-string

#+BEGIN_SRC elisp
(make-string 5 ?x)
#+END_SRC

#+RESULTS:
: "xxxxx"

* make-symbol

#+BEGIN_SRC elisp
(make-symbol "foo")
#+END_SRC

#+RESULTS:
: foo

* make-vector

#+BEGIN_SRC elisp
(make-vector 3 'Z)
#+END_SRC

#+RESULTS:
: [Z Z Z]

* map-apply

#+BEGIN_SRC elisp
(map-apply (lambda (idx elt)
             (list idx elt))
           [a b c])
#+END_SRC

#+RESULTS:
: ((0 a)
:  (1 b)
:  (2 c))

#+BEGIN_SRC elisp
(map-apply (lambda (k v)
             (cons k v))
           #s(hash-table data (x 1 y 2)))
#+END_SRC

#+RESULTS:
: ((x . 1)
:  (y . 2))

* map-delete

#+BEGIN_SRC elisp
(let ((alist (list (cons 'x 1)
                   (cons 'y 2)
                   (cons 'z 3))))
  ;; `setq' is necessary otherwise `alist' is unchanged in this case
  (setq alist (map-delete alist 'x))
  alist)
#+END_SRC

#+RESULTS:
: ((y . 2)
:  (z . 3))

* map-elt

#+BEGIN_SRC elisp
(map-elt '((x . 1) (y . 2)) 'y)
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC elisp
(map-elt #s(hash-table data (x 1 y 2)) 'y)
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC elisp
(map-elt [1 2 3] 1)
#+END_SRC

#+RESULTS:
: 2

* map-into

#+BEGIN_SRC elisp
(map-into #s(hash-table data (x 1 y 2)) 'list)
#+END_SRC

#+RESULTS:
: ((x . 1)
:  (y . 2))

* map-keys

#+BEGIN_SRC elisp
(map-keys '((a . 1) (b . ((c . 2)))))
#+END_SRC

#+RESULTS:
: (a b)

* map-let

#+BEGIN_SRC elisp
(map-let (one three) '((one . 1)
                       (two . 2)
                       (three . 3))
  (list :one one
        :three three))
#+END_SRC

#+RESULTS:
: (:one 1 :three 3)

#+BEGIN_SRC elisp
(map-let (('one x)  ('three z)) '((one . 1)
                                  (two . 2)
                                  (three . 3))
  (list x z))
#+END_SRC

#+RESULTS:
: (1 3)

* map-nested-elt

#+BEGIN_SRC elisp
(map-nested-elt '((post . ((title . "some title"))))
                '(post title))
#+END_SRC

#+RESULTS:
: "some title"

* map-pairs

#+BEGIN_SRC elisp
(map-pairs [1 2 3])
#+END_SRC

#+RESULTS:
: ((0 . 1)
:  (1 . 2)
:  (2 . 3))

* map-put

#+BEGIN_SRC elisp
(let ((alist (list (cons 0 3)
                   (cons 1 4)
                   (cons 2 5))))
  (map-put alist 0 300)
  alist)
#+END_SRC

#+RESULTS:
: ((0 . 300)
:  (1 . 4)
:  (2 . 5))

* map-values

#+BEGIN_SRC elisp
(map-values '((a . 1) (b . 2)))
#+END_SRC

#+RESULTS:
: (1 2)

* mapatoms

#+BEGIN_SRC elisp
(let (commands)
  (mapatoms
   (lambda (symbol)
     (when (commandp symbol)
       (push symbol commands))))
  (message "There are %d Emacs commands" (length commands)))
#+END_SRC

#+RESULTS:
: "There are 7101 Emacs commands"

* mapc

#+BEGIN_SRC elisp :results output
(mapc #'princ '(1 2 3))
#+END_SRC

#+RESULTS:
: "123"

* mapcan

#+BEGIN_SRC elisp
(mapcan
 (lambda (pair)
   (list (car pair) (cdr pair)))
 '((x . 1) (y . 2) (z . 3)))
#+END_SRC

#+RESULTS:
: (x 1 y 2 z 3)

#+BEGIN_SRC elisp
(mapcan (lambda (x) (and (numberp x) (list x))) 
        '(a 1 b c 3 4 d 5))
#+END_SRC

#+RESULTS:
: (1 3 4 5)

* mapcar

#+BEGIN_SRC elisp
(mapcar #'1+ '(1 2 3))
#+END_SRC

#+RESULTS:
: (2 3 4)

* mapconcat

#+BEGIN_SRC elisp
(mapconcat #'identity '("abc" "def" "ghi") ", ")
#+END_SRC

#+RESULTS:
: "abc, def, ghi"

* maphash

#+BEGIN_SRC elisp
(let (alist)
  (maphash (lambda (key val)
             (push (cons key val) alist))
           #s(hash-table data (x 1 y 2)))
  (nreverse alist))
#+END_SRC

#+RESULTS:
: ((x . 1)
:  (y . 2))

* match-string

#+BEGIN_SRC elisp
(let ((string "Today is <2018-11-09>")
      (regexp (rx (group (= 4 num)) "-"
                  (group (= 2 num)) "-"
                  (group (= 2 num)))))
  (when (string-match regexp string)
    (list :year (match-string 1 string)
          :month (match-string 2 string)
          :day (match-string 3 string))))
#+END_SRC

#+RESULTS:
: (:year "2018" :month "11" :day "09")

* match-string-no-properties

#+BEGIN_SRC elisp
(let ((string (propertize "hello" 'face 'bold)))
  (string-match ".*" string)
  (list (match-string 0 string)
        (match-string-no-properties 0 string)))
#+END_SRC

#+RESULTS:
: (#("hello" 0 5
:    (face bold))
:  "hello")

* max

#+BEGIN_SRC elisp
(max 1 3 2.5)
#+END_SRC

#+RESULTS:
: 3

* md5

#+BEGIN_SRC elisp
(md5 "hello")
#+END_SRC

#+RESULTS:
: "5d41402abc4b2a76b9719d911017c592"

* message

#+BEGIN_SRC elisp
(message "Hi, %s!" "Tyke")
#+END_SRC

#+RESULTS:
: "Hi, Tyke!"

* min

#+BEGIN_SRC elisp
(min -4 1)
#+END_SRC

#+RESULTS:
: -4

* mod

#+BEGIN_SRC elisp
(mod 5.5 2.5)
#+END_SRC

#+RESULTS:
: 0.5

* narrow-to-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello world")
  (narrow-to-region 1 6)
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hello"

* not

#+BEGIN_SRC elisp
(list (not (> 1 2))
      (not (< 1 2)))
#+END_SRC

#+RESULTS:
: (t nil)

* nreverse

#+BEGIN_SRC elisp
(let ((x '(1 2 3 4)))
  (setq x (nreverse x))
  x)
#+END_SRC

#+RESULTS:
: (4 3 2 1)

* null

#+BEGIN_SRC elisp
(null '(1 2 3))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC elisp
(null '())
#+END_SRC

#+RESULTS:
: t

* number-sequence

#+BEGIN_SRC elisp
(number-sequence 1 10)
#+END_SRC

#+RESULTS:
: (1 2 3 4 5 6 7 8 9 10)

#+BEGIN_SRC elisp
(number-sequence 1 10 2)
#+END_SRC

#+RESULTS:
: (1 3 5 7 9)

#+BEGIN_SRC elisp
(number-sequence 10 1 -1)
#+END_SRC

#+RESULTS:
: (10 9 8 7 6 5 4 3 2 1)

* number-to-string

#+BEGIN_SRC elisp
(prin1-to-string 256)
#+END_SRC

#+RESULTS:
: "256"

* or

#+BEGIN_SRC elisp
(or nil nil 1 2)
#+END_SRC

#+RESULTS:
: 1

* plist-get

#+BEGIN_SRC elisp
(plist-get '(:a 1 :b 2 :c 3) :b)
#+END_SRC

#+RESULTS:
: 2

* plist-member

#+BEGIN_SRC elisp
(plist-member '(:x nil) :x)
#+END_SRC

#+RESULTS:
: (:x nil)

#+BEGIN_SRC elisp
(plist-member '(:x nil) :y)
#+END_SRC

#+RESULTS:
: nil

* plist-put

#+BEGIN_SRC elisp
(let ((plist (list :a 1 :b 2)))
  (setq plist (plist-put plist :b 200)))
#+END_SRC

#+RESULTS:
: (:a 1 :b 200)

* point

#+BEGIN_SRC elisp
(point)
#+END_SRC

#+RESULTS:
: 7899

* point-max

#+BEGIN_SRC elisp
(point-max)
#+END_SRC

#+RESULTS:
: 14180

* point-min

#+BEGIN_SRC elisp
(point-min)
#+END_SRC

#+RESULTS:
: 1

* pp

#+BEGIN_SRC elisp :results output
(pp (lambda (a y) (+ x y)))
#+END_SRC

#+RESULTS:
: "(lambda\n  (a y)\n  (+ x y))\n"

* prin1

#+BEGIN_SRC elisp :results output
(prin1 "hello")
#+END_SRC

#+RESULTS:
: "\"hello\""

* prin1-to-string

#+BEGIN_SRC elisp
(list (prin1-to-string 'symbol)
      (prin1-to-string "string")
      (prin1-to-string 42))
#+END_SRC

#+RESULTS:
: ("symbol" "\"string\"" "42")

* princ

#+BEGIN_SRC elisp :results output
(princ "hello")
#+END_SRC

#+RESULTS:
: "hello"

* print

#+BEGIN_SRC elisp :results output
(print "hello")
#+END_SRC

#+RESULTS:
: "\n\"hello\"\n"

* process-lines

#+BEGIN_SRC elisp
(process-lines "seq" "3")
#+END_SRC

#+RESULTS:
: ("1" "2" "3")

* prog1

#+BEGIN_SRC elisp
(prog1 1 2 3)
#+END_SRC

#+RESULTS:
: 1

* prog2

#+BEGIN_SRC elisp
(progn 1 2 3)
#+END_SRC

#+RESULTS:
: 3

* progn

#+BEGIN_SRC elisp
(progn 1 2 3)
#+END_SRC

#+RESULTS:
: 3

* propertize

#+BEGIN_SRC elisp
(propertize "Hello" 'face 'italic)
#+END_SRC

#+RESULTS:
: #("Hello" 0 5
:   (face italic))

* push

#+BEGIN_SRC elisp
(let ((l '(1 2)))
  (push 3 l)
  l)
#+END_SRC

#+RESULTS:
: (3 1 2)

* puthash

#+BEGIN_SRC elisp
(let ((table (make-hash-table)))
  (puthash 'x 1 table)
  (puthash 'y 2 table)
  table)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data
: (x 1 y 2))

* random

#+BEGIN_SRC elisp
;; [0, 3)
(random 3)
#+END_SRC

#+RESULTS:
: 1

* rassoc

#+BEGIN_SRC elisp
(rassoc '(2) '(("one" 1)
               ("two" 2)
               ("three" 3)))
#+END_SRC

#+RESULTS:
: ("two" 2)

* rassq

#+BEGIN_SRC elisp
(rassq 'tyke '((tom . jerry) (spike . tyke)))
#+END_SRC

#+RESULTS:
: (spike . tyke)

* re-search-forward

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "# Intro\n"
          "# Usage\n"
          "# License\n")
  (goto-char (point-min))
  (let ((matches '()))
    (while (re-search-forward "^# \\(.+\\)$" nil t)
      (push (match-string 1) matches))
    (nreverse matches)))
#+END_SRC

#+RESULTS:
: ("Intro" "Usage" "License")

* read

#+BEGIN_SRC elisp
(read "42")
#+END_SRC

#+RESULTS:
: 42

* read-from-minibuffer

#+BEGIN_SRC elisp
(read-from-minibuffer "Enter your name: ")
#+END_SRC

#+RESULTS:
: "xuchunyang"

* read-from-string

#+BEGIN_SRC elisp
(read-from-string "(setq x \"hello\") (setq y 5)")
#+END_SRC

#+RESULTS:
: ((setq x "hello")
:  . 16)

* read-minibuffer

#+BEGIN_SRC elisp
(read-minibuffer "Enter an expression: " (format "%s" '(+ 1 2)))
#+END_SRC

#+RESULTS:
: (+ 1 2)

* read-no-blanks-input

#+BEGIN_SRC elisp
(read-no-blanks-input "Username (space and tab are not allowed): ")
#+END_SRC

#+RESULTS:
: "xuchunyang"

* read-regexp

#+BEGIN_SRC elisp
(read-regexp "Search for regexp: ")
#+END_SRC

#+RESULTS:
: "^\\* "

* read-string

#+BEGIN_SRC elisp
(read-string "Enter your name: ")
#+END_SRC

* record

#+BEGIN_SRC elisp
(record 'foo 23 [bar baz] "rats")
#+END_SRC

#+RESULTS:
: #s(foo 23
:        [bar baz]
:        "rats")

* recordp

#+BEGIN_SRC elisp
(recordp #s(a))
#+END_SRC

#+RESULTS:
: t

* remhash

#+BEGIN_SRC elisp
(let ((table (make-hash-table)))
  (puthash 'x 1 table)
  (puthash 'y 2 table)
  (remhash 'x table)
  table)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data
: ( y 2))

* replace-match

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "65 83 68 70")
  (goto-char (point-min))
  (while (re-search-forward "[0-9]+" nil t)
    (replace-match
     ;; "65" => ?A => "A"
     (string (read (match-string 0)))
     'fixedcase
     'literal))
  (buffer-string))
#+END_SRC

#+RESULTS:
: "A S D F"

* replace-regexp-in-string

#+BEGIN_SRC elisp
(replace-regexp-in-string "-" ", " "foo-bar-baz")
#+END_SRC

#+RESULTS:
: "foo, bar, baz"

#+BEGIN_SRC elisp
(replace-regexp-in-string
 "[0-9][0-9]\\'"
 (lambda (substring)
   (let ((suffixes
          ;; https://en.wikipedia.org/wiki/Ordinal_indicator
          (append '("st" "nd" "rd") (make-list 17 "th")
                  '("st" "nd" "rd") (make-list 7 "th")
                  '("st"))))
     (concat substring (elt suffixes (string-to-number substring)))))
 "2018 Nov 07")
#+END_SRC

#+RESULTS:
: "2018 Nov 07th"

* reverse

#+BEGIN_SRC elisp
(let* ((old '(1 2 3))
       (new (reverse x)))
  (list old new))
#+END_SRC

#+RESULTS:
: ((1 2 3)
:  (3 2 1))

* ring-copy

#+BEGIN_SRC elisp
(ring-copy (make-ring 3))
#+END_SRC

#+RESULTS:
: (0 0 .
:    [nil nil nil])

* ring-elements

#+BEGIN_SRC elisp
(let ((ring (make-ring 10)))
  (ring-insert ring 1)
  (ring-insert ring 2)
  (ring-insert ring 3)
  (ring-elements ring))
#+END_SRC

#+RESULTS:
: (3 2 1)

* ring-empty-p

#+BEGIN_SRC elisp
(ring-empty-p (make-ring 3))
#+END_SRC

#+RESULTS:
: t

* ring-insert

#+BEGIN_SRC elisp
(let ((ring (make-ring 3)))
  (ring-insert ring 1)
  (ring-insert ring 2)
  (ring-insert ring 3)
  ring)
#+END_SRC

#+RESULTS:
: (0 3 .
:    [1 2 3])

* ring-insert-at-beginning

#+BEGIN_SRC elisp
(let ((ring (make-ring 3)))
  (ring-insert ring 1)
  (ring-insert ring 2)
  (ring-insert-at-beginning ring 0)
  ring)
#+END_SRC

#+RESULTS:
: (2 3 .
:    [1 2 0])

* ring-length

#+BEGIN_SRC elisp
(let ((ring (make-ring 3)))
  (ring-insert ring "hello")
  (ring-length ring))
#+END_SRC

#+RESULTS:
: 1

* ring-p

#+BEGIN_SRC elisp
(ring-p (make-ring 3))
#+END_SRC

#+RESULTS:
: t

* ring-ref

#+BEGIN_SRC elisp
(let ((ring (make-ring 3)))
  (ring-insert ring 1)
  (ring-insert ring 2)
  (ring-insert ring 3)
  (ring-ref ring 0))
#+END_SRC

#+RESULTS:
: 3

* ring-remove

#+BEGIN_SRC elisp
(let ((ring (make-ring 3)))
  (ring-insert ring 1)
  (ring-insert ring 2)
  (ring-insert ring 3)
  (ring-remove ring)
  ring)
#+END_SRC

#+RESULTS:
: (0 2 .
:    [2 3 nil])

* ring-size

#+BEGIN_SRC elisp
(ring-size (make-ring 3))
#+END_SRC

#+RESULTS:
: 3

* round

#+BEGIN_SRC elisp
(list (round 1.2)
      (round 1.5))
#+END_SRC

#+RESULTS:
: (1 2)

* save-excursion

#+BEGIN_SRC elisp
(save-excursion 
  (goto-char (point-min)))
#+END_SRC

#+RESULTS:
: 1

* save-match-data

#+BEGIN_SRC elisp
(list
 (string-match "hello" "hello world")
 (match-data)
 (save-match-data
   (string-match "world" "hello world")
   (match-data))
 (match-data))
#+END_SRC

#+RESULTS:
: (0
:  (0 5)
:  (6 11)
:  (0 5))

* save-restriction

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello world")
  (narrow-to-region 1 6)
  (list (buffer-narrowed-p)
        (save-restriction
          (widen)
          (buffer-narrowed-p))
        (buffer-narrowed-p)))

#+END_SRC

#+RESULTS:
: (t nil t)

* secure-hash

#+BEGIN_SRC elisp
(secure-hash 'md5 "hello")
#+END_SRC

#+RESULTS:
: "5d41402abc4b2a76b9719d911017c592"

* secure-hash-algorithms

#+BEGIN_SRC elisp
(secure-hash-algorithms)
#+END_SRC

#+RESULTS:
: (md5 sha1 sha224 sha256 sha384 sha512)

* seq-concatenate

#+BEGIN_SRC elisp
(seq-concatenate 'list '(1 2) '(3 4) [5 6])
#+END_SRC

#+RESULTS:
: (1 2 3 4 5 6)

* seq-contains

#+BEGIN_SRC elisp
(seq-contains '(symbol1 symbol2) 'symbol1)
#+END_SRC

#+RESULTS:
: symbol1

* seq-count

#+BEGIN_SRC elisp
(seq-count (lambda (elt) (> elt 0)) [-1 2 0 3 -2])
#+END_SRC

#+RESULTS:
: 2

* seq-difference

#+BEGIN_SRC elisp
(seq-difference '(2 3 4 5) [1 3 5 6 7])
#+END_SRC

#+RESULTS:
: (2 4)

* seq-do

#+BEGIN_SRC elisp :results output
(seq-do #'princ '(1 2 3))
#+END_SRC

#+RESULTS:
: "123"

* seq-doseq

#+BEGIN_SRC elisp :results output
(seq-doseq (i [1 2 3]) 
  (princ i))
#+END_SRC

#+RESULTS:
: "123"

* seq-drop

#+BEGIN_SRC elisp
(seq-drop [1 2 3 4 5 6] 3)
#+END_SRC

#+RESULTS:
: [4 5 6]

* seq-drop-while

#+BEGIN_SRC elisp
(seq-drop-while
 (lambda (elt) (> elt 0))
 '(1 2 3 -1 -2))
#+END_SRC

#+RESULTS:
: (-1 -2)

* seq-elt

#+BEGIN_SRC elisp
(seq-elt [1 2 3 4] 2)
#+END_SRC

#+RESULTS:
: 3

* seq-empty-p

#+BEGIN_SRC elisp
(seq-map #'seq-empty-p '([] () ""))
#+END_SRC

#+RESULTS:
: (t t t)

* seq-every-p

#+BEGIN_SRC elisp
(seq-every-p #'numberp [2 4 6])
#+END_SRC

#+RESULTS:
: t

* seq-filter

#+BEGIN_SRC elisp
(seq-filter (lambda (elt) (> elt 0)) [1 -1 3 -3 5])
#+END_SRC

#+RESULTS:
: (1 3 5)

#+BEGIN_SRC elisp
(seq-filter #'numberp '(a 1 b c 3 4 d 5))
#+END_SRC

#+RESULTS:
: (1 3 4 5)

* seq-find

#+BEGIN_SRC elisp
(seq-find #'numberp ["abc" 1 nil])
#+END_SRC

#+RESULTS:
: 1

* seq-group-by

#+BEGIN_SRC elisp
(seq-group-by #'integerp '(1 2.1 3 2 3.2))
#+END_SRC

#+RESULTS:
: ((t 1 3 2)
:  (nil 2.1 3.2))

* seq-intersection

#+BEGIN_SRC elisp
(seq-intersection [2 3 4 5] [1 3 5 6 7])
#+END_SRC

#+RESULTS:
: (3 5)

* seq-into

#+BEGIN_SRC elisp
(seq-into [1 2 3] 'list)
#+END_SRC

#+RESULTS:
: (1 2 3)

* seq-length

#+BEGIN_SRC elisp
(seq-length [0 1 2 3])
#+END_SRC

#+RESULTS:
: 4

* seq-let

#+BEGIN_SRC elisp
(seq-let (a _ c) '(1 2 3 4)
  (list a c))
#+END_SRC

#+RESULTS:
: (1 3)

* seq-map

#+BEGIN_SRC elisp
(seq-map #'1+ '(1 2 3))
#+END_SRC

#+RESULTS:
: (2 3 4)

* seq-map-indexed

#+BEGIN_SRC elisp
(seq-map-indexed
 (lambda (elt idx)
   (list idx elt))
 '(a b c))
#+END_SRC

#+RESULTS:
: ((0 a)
:  (1 b)
:  (2 c))

* seq-mapcat

#+BEGIN_SRC elisp
(seq-mapcat #'seq-reverse '((3 2 1) (6 5 4)))
#+END_SRC

#+RESULTS:
: (1 2 3 4 5 6)

* seq-mapn

#+BEGIN_SRC elisp
(seq-mapn #'+ '(2 4 6) '(20 40 60))
#+END_SRC

#+RESULTS:
: (22 44 66)

* seq-max

#+BEGIN_SRC elisp
(seq-max [1 3 2])
#+END_SRC

#+RESULTS:
: 3

* seq-min

#+BEGIN_SRC elisp
(seq-min [3 1 2])
#+END_SRC

#+RESULTS:
: 1

* seq-partition

#+BEGIN_SRC elisp
(seq-partition '(0 1 2 3 4 5 6 7) 3)
#+END_SRC

#+RESULTS:
: ((0 1 2)
:  (3 4 5)
:  (6 7))

* seq-position

#+BEGIN_SRC elisp
(seq-position '(a b c) 'b)
#+END_SRC

#+RESULTS:
: 1

* seq-random-elt

#+BEGIN_SRC elisp
(seq-random-elt [1 2 3 4])
#+END_SRC

#+RESULTS:
: 3

* seq-reduce

#+BEGIN_SRC elisp
(seq-reduce #'+ (number-sequence 1 100) 0)
#+END_SRC

#+RESULTS:
: 5050

* seq-remove

#+BEGIN_SRC elisp
(seq-remove (lambda (elt) (> elt 0)) [1 -1 3 -3 5])
#+END_SRC

#+RESULTS:
: (-1 -3)

* seq-set-equal-p

#+BEGIN_SRC elisp
(seq-set-equal-p '(a b c) '(c b a))
#+END_SRC

#+RESULTS:
: t

* seq-some

#+BEGIN_SRC elisp
(seq-some #'numberp ["abc" 1 nil])
#+END_SRC

#+RESULTS:
: t

* seq-sort

#+BEGIN_SRC elisp
(seq-sort #'< '(1 3 2))
#+END_SRC

#+RESULTS:
: (1 2 3)

* seq-sort-by

#+BEGIN_SRC elisp
(seq-sort-by #'seq-length #'> ["a" "ab" "abc"])
#+END_SRC

#+RESULTS:
: ["abc" "ab" "a"]

* seq-subseq

#+BEGIN_SRC elisp
(seq-subseq '(1 2 3 4 5) 1)
#+END_SRC

#+RESULTS:
: (2 3 4 5)

* seq-take

#+BEGIN_SRC elisp
(seq-take '(1 2 3 4) 3)
#+END_SRC

#+RESULTS:
: (1 2 3)

* seq-take-while

#+BEGIN_SRC elisp
(seq-take-while
 (lambda (elt)
   (> elt 0))
 '(1 2 3 -1 -2))
#+END_SRC

#+RESULTS:
: (1 2 3)

* seq-uniq

#+BEGIN_SRC elisp
(seq-uniq '(1 2 2 1 3))
#+END_SRC

#+RESULTS:
: (1 2 3)

* seqp

#+BEGIN_SRC elisp
(seqp [1 2])
#+END_SRC

#+RESULTS:
: t

* sequencep

#+BEGIN_SRC elisp
(and (sequencep '(1 2 3))
     (sequencep [1 2 3])
     (sequencep "123"))
#+END_SRC

#+RESULTS:
: t

* set-keymap-parent

#+BEGIN_SRC elisp :results silent
(let ((map (make-sparse-keymap)))
  (set-keymap-parent map special-mode-map)
  map)
#+END_SRC

* setf

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3 4 5)))
  (setf (elt nums 2) 300)
  nums)
#+END_SRC

#+RESULTS:
: (1 2 300 4 5)

#+BEGIN_SRC elisp :results silent
(cl-assert (equal (macroexpand '(setf (point) (point-min)))
                  '(goto-char (point-min))))
(setf (point) (point-min))
#+END_SRC

* setq

#+BEGIN_SRC elisp
(let (x)
  (setq x 1)
  x)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC elisp
(let (x y z)
  (setq x 1
        y 2
        z (+ x y))
  (list x y z))
#+END_SRC

#+RESULTS:
: (1 2 3)

* shell-command-to-string

#+BEGIN_SRC elisp
(shell-command-to-string "echo hello world")
#+END_SRC

#+RESULTS:
: "hello world\n"

* sin

#+BEGIN_SRC elisp
(sin (/ float-pi 2))
#+END_SRC

#+RESULTS:
: 1.0

* sort

#+BEGIN_SRC elisp
(let ((num '(1 3 2 6 5 4 0)))
  (sort num #'<))
#+END_SRC

#+RESULTS:
: (0 1 2 3 4 5 6)

#+BEGIN_SRC elisp
;; Make a sorted copy without destroying the original
(let* ((num '(1 3 2 6 5 4 0))
       (sorted (sort (copy-sequence num) #'<)))
  (list :num num :sorted sorted))
#+END_SRC

#+RESULTS:
: (:num
:  (1 3 2 6 5 4 0)
:  :sorted
:  (0 1 2 3 4 5 6))

* sort-subr

#+BEGIN_SRC elisp :results drawer
(with-temp-buffer
  (insert "\
1 + 2 + 3
123
0 * 100
2 ^ 10
10 * 100")
  (goto-char (point-min))
  (sort-subr nil
             #'forward-line #'end-of-line
             ;; Compute the sort key
             (lambda ()
               (string-to-number
                (calc-eval
                 (buffer-substring (line-beginning-position)
                                   (line-end-position))))))
  (buffer-string))
#+END_SRC

#+RESULTS:
:RESULTS:
0 * 100
1 + 2 + 3
123
10 * 100
2 ^ 10
:END:

* split-string

#+BEGIN_SRC elisp
(split-string "The   quick brown fox." " +")
#+END_SRC

#+RESULTS:
: ("The" "quick" "brown" "fox.")

* sqrt

#+BEGIN_SRC elisp
(sqrt 4)
#+END_SRC

#+RESULTS:
: 2.0

* start-process

#+BEGIN_SRC elisp
(start-process "sleep" "*sleep*" "sleep" "5")
#+END_SRC

#+RESULTS:
: #<process sleep>

* start-process-shell-command

#+BEGIN_SRC elisp
(start-process-shell-command "sleep" "*sleep*" "sleep 5 && echo wake")
#+END_SRC

#+RESULTS:
: #<process sleep>

* store-substring

#+BEGIN_SRC elisp
(let ((a-str "hello"))
  (store-substring a-str 0 ?H)
  a-str)
#+END_SRC

#+RESULTS:
: "Hello"

* string

#+BEGIN_SRC elisp
(string ?a ?b ?c)
#+END_SRC

#+RESULTS:
: "abc"

* string-match

#+BEGIN_SRC elisp
(let ((string "Today is <2018-11-07>."))
  (when (string-match "<\\([-0-9]+\\)>" string)
    (match-string 1 string)))
#+END_SRC

#+RESULTS:
: "2018-11-07"

* string-match-p

#+BEGIN_SRC elisp
(list (string-match-p "world" "hello world")
      (string-match-p "12345" "hello world"))
#+END_SRC

#+RESULTS:
: (6 nil)

* string-prefix-p

#+BEGIN_SRC elisp
(string-prefix-p "Sat" "Saturday night plans")
#+END_SRC

#+RESULTS:
: t

* string-suffix-p

#+BEGIN_SRC elisp
(string-suffix-p "!" "Cats are the best!")
#+END_SRC

#+RESULTS:
: t

* string-to-char

#+BEGIN_SRC elisp
(string-to-char "abc")
#+END_SRC

#+RESULTS:
: 97

#+BEGIN_SRC elisp
(list (string-to-char (string ?\0))
      (string-to-char ""))
#+END_SRC

#+RESULTS:
: (0 0)

* string-to-list

#+BEGIN_SRC elisp
(string-to-list "abc")
#+END_SRC

#+RESULTS:
: (97 98 99)

* string-to-number

#+BEGIN_SRC elisp
(string-to-number "42")
#+END_SRC

#+RESULTS:
: 42

#+BEGIN_SRC elisp
(string-to-number "2A" 16)
#+END_SRC

#+RESULTS:
: 42

* string=

#+BEGIN_SRC elisp
(string= "foo" "foo")
#+END_SRC

#+RESULTS:
: t

* subst-char-in-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello world")
  (subst-char-in-region (point-min) (point-max) ?o ?O)
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hellO wOrld"

* subst-char-in-string

#+BEGIN_SRC elisp
(subst-char-in-string ?o ?O "hello world")
#+END_SRC

#+RESULTS:
: "hellO wOrld"

#+BEGIN_SRC elisp
(let ((string "hello world"))
  (subst-char-in-string ?o ?O string 'inplace)
  string)
#+END_SRC

#+RESULTS:
: "hellO wOrld"

* substring

#+BEGIN_SRC elisp
(substring "abcdefg" 0 3)
#+END_SRC

#+RESULTS:
: "abc"

#+BEGIN_SRC elisp
;; Get the first and last character in a non-empty string
(list :first (substring "abcdefg" 0 1)
      :last  (substring "abcdefg" -1))
#+END_SRC

#+RESULTS:
: (:first "a" :last "g")

* substring-no-properties

#+BEGIN_SRC elisp
(substring-no-properties (propertize "hello" 'face 'italic))
#+END_SRC

#+RESULTS:
: "hello"

* symbol-name

#+BEGIN_SRC elisp
(symbol-name 'foo)
#+END_SRC

#+RESULTS:
: "foo"

* symbol-value

#+BEGIN_SRC elisp
(symbol-value (intern "emacs-version"))
#+END_SRC

#+RESULTS:
: "26.1"

* tan

#+BEGIN_SRC elisp
(tan (/ float-pi 4))
#+END_SRC

#+RESULTS:
: 0.9999999999999999

* terpri

#+BEGIN_SRC elisp :results output
(terpri)
#+END_SRC

#+RESULTS:
: "\n"

* thing-at-point

#+BEGIN_SRC elisp :eval no
(thing-at-point 'symbol)
#+END_SRC

* time-subtract

#+BEGIN_SRC elisp
(let ((t1 (current-time)))
  (sit-for 1)
  (message "Elapsed time: %fs"
           (float-time (time-subtract nil t1))))
#+END_SRC

#+RESULTS:
: "Elapsed time: 1.006051s"

* translate-region

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "Hello World")
  ;; Reverse case, a -> A and A -> a
  (translate-region
   (point-min)
   (point-max)
   (apply #'string
          (mapcar (lambda (char)
                    (cond ((<= ?a char ?z) (- char 32))
                          ((<= ?A char ?Z) (+ char 32))
                          (t char)))
                  ;; ASCII code range
                  (number-sequence 0 255))))
  (buffer-string))
#+END_SRC

#+RESULTS:
: "hELLO wORLD"

* transpose-regions

#+BEGIN_SRC elisp
(with-temp-buffer
  (let (beg1 end1 beg2 end2)
    (insert "hello" ?\n
            "world" ?\n)
    (goto-char (point-min))
    (setq beg1 (line-beginning-position)
          end1 (line-end-position))

    (forward-line 1)
    (setq beg2 (line-beginning-position)
          end2 (line-end-position))
    (transpose-regions beg1 end1
                       beg2 end2)
    (buffer-string)))
#+END_SRC

#+RESULTS:
: "world\nhello\n"

* truncate

#+BEGIN_SRC elisp
(truncate 1.2)
#+END_SRC

#+RESULTS:
: 1

* type-of

#+BEGIN_SRC elisp
(type-of 42)
#+END_SRC

#+RESULTS:
: integer

* unless

#+BEGIN_SRC elisp
(unless nil 123)
#+END_SRC

#+RESULTS:
: 123

* upcase

#+BEGIN_SRC elisp
(upcase "Hello World")
#+END_SRC

#+RESULTS:
: "HELLO WORLD"

* upcase-initials

#+BEGIN_SRC elisp
(upcase-initials "The CAT in the hAt")
#+END_SRC

#+RESULTS:
: "The CAT In The HAt"

* url-hexify-string

#+BEGIN_SRC elisp
(url-hexify-string "hello world")
#+END_SRC

#+RESULTS:
: "hello%20world"

* url-retrieve

#+BEGIN_SRC elisp
(url-retrieve "http://example.com"
              (lambda (status start-time)
                (message "The request is completed in %f seconds"
                         (float-time (time-subtract nil start-time)))
                (display-buffer (current-buffer)))
              `(,(current-time))
              'silent
              'inhibit-cookies)
#+END_SRC

#+RESULTS:
: #<buffer  *http example.com:80*-426008>

* url-retrieve-synchronously

#+BEGIN_SRC elisp
(with-current-buffer (url-retrieve-synchronously "https://api.github.com/status")
  (goto-char url-http-end-of-headers)
  (json-read))
#+END_SRC

#+RESULTS:
: ((message . "GitHub lives! (2018-11-06 21:40:11 -0800) (1)"))

* url-unhex-string

#+BEGIN_SRC elisp
(url-unhex-string "hello%20world")
#+END_SRC

#+RESULTS:
: "hello world"

* user-error

#+BEGIN_SRC elisp
(user-error "It's all your fault, not mime")
#+END_SRC

* vconcat

#+BEGIN_SRC elisp
(vconcat '(a b) "cd" [e f])
#+END_SRC

#+RESULTS:
: [a b 99 100 e f]

* vector

#+BEGIN_SRC elisp
(vector 1 2 3)
#+END_SRC

#+RESULTS:
: [1 2 3]

* vectorp

#+BEGIN_SRC elisp
(vectorp [1 2 3])
#+END_SRC

#+RESULTS:
: t

* when

#+BEGIN_SRC elisp
(when t 123)
#+END_SRC

#+RESULTS:
: 123

#+BEGIN_SRC elisp
(when nil 123
#+END_SRC

#+RESULTS:
: nil

* while

#+BEGIN_SRC elisp
(let ((list '(1 2 3 4))
      result)
  (while list
    (push (car list) result)
    (setq list (cdr list)))
  result)
#+END_SRC

#+RESULTS:
: (4 3 2 1)

* widen

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello world")
  (narrow-to-region 1 6)
  `(:narrowed
    ,(buffer-string)
    ,@(widen)
    :widened
    ,(buffer-string)))
#+END_SRC

#+RESULTS:
: (:narrowed "hello" :widened "hello world")

* with-current-buffer

#+BEGIN_SRC elisp
(with-current-buffer "*Messages*"
  (current-buffer))
#+END_SRC

#+RESULTS:
: #<buffer *Messages*>

* with-output-to-string

#+BEGIN_SRC elisp
(with-output-to-string
  (princ "Hello World"))
#+END_SRC

#+RESULTS:
: "Hello World"

* with-temp-buffer

#+BEGIN_SRC elisp
(with-temp-buffer
  (insert "hello")
  (insert "world")
  (buffer-string))
#+END_SRC

#+RESULTS:
: "helloworld"

* write-char

#+BEGIN_SRC elisp :results output
(write-char ?a)
#+END_SRC

#+RESULTS:
: "a"

* write-region

#+BEGIN_SRC elisp
(write-region "Hello World\n" nil "/tmp/tmp.txt")
#+END_SRC

#+RESULTS:
: nil

* zerop

#+BEGIN_SRC elisp
(zerop 0)
#+END_SRC

#+RESULTS:
: t

